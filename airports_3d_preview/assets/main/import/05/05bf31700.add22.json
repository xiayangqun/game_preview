[1,["01VqFRHuBAHrZtOu1kWxII","366MrjhsJFNpG06K3qaR1u","15O3eFlxpNF41QVAMJ/gIt","03PeISiHZEd6quRPohWbpJ","af4k0YyH1DB55mXvr0eD/P","78hhjSZcxOyblJC8KPScP2@96d75","b4ulH6QHhLiKUyI1Alz2tT","78hhjSZcxOyblJC8KPScP2@f1248","80E4iArMdAKI3UWGdubfoQ","78hhjSZcxOyblJC8KPScP2@627c9","b3x0v3CDVOZbefxipdSnpd","78hhjSZcxOyblJC8KPScP2@55ac2","64lSIF7MVGc5KWYH/FOwSB","a4UeemhDZGIJC3lVTeIEM9","58kjQRtdRONZuQ+m8LK2/j","234Sip+TxA/7DJ2oLmkatb@398f3","c6UlWco/VNF6vDP3jIEjWx","bdpiMEHmRLMKdfI/lGdwzZ","78hhjSZcxOyblJC8KPScP2@5b8d3","00d0tmy0BLVaqNU0mE+p5H","78hhjSZcxOyblJC8KPScP2@e0742","234Sip+TxA/7DJ2oLmkatb@0acd3","234Sip+TxA/7DJ2oLmkatb@a8c70","03wEOcK39P0YX4z23umn3R","6eAKqOtDpAcKDEj/xyHi8m@6c48a","391ySx/nVKa5tw6dff9nfL@6c48a","a3zQCfCrBCDZJ4uf2rk5u8","93rxRIxYZGeY6mcYdoWEq3","ady/0R7QdCjLneJizc5VXd@f9941","db/l4k089Ip45JgvUziJjb@f9941","d3xLBuBENHQI2HrwYmh4bF@f9941","a8LlcPRLhPCpJPwvsKJ07M@f9941","c10+/EzSVIWL+mNgy0RWrG@f9941","ebrRJZ/UZM1LCluoypSx40@f9941","ab91K9AV1NOJqtmwYek2bp@f9941","f1CxByX8lIB4o+CTsltVB4@f9941","473qxIx1hDdrhhaefMMb3H@f9941","5d6SRZ8dZOsqx/TrqQRlPh","b2XISUXgFKfI4OfNckWLtW","087V52vS9NQr0zIEMfV4hM@2fbd1","087V52vS9NQr0zIEMfV4hM@46450","087V52vS9NQr0zIEMfV4hM@58cdc","087V52vS9NQr0zIEMfV4hM@d3be4","087V52vS9NQr0zIEMfV4hM@f4c36","087V52vS9NQr0zIEMfV4hM@41fa6","121IMpLxFMbJEfy9DuHE8d","78hhjSZcxOyblJC8KPScP2@b8002","f337HRP4JLR70bJeizkoEu","78hhjSZcxOyblJC8KPScP2@81311","68umHOnvdJwbVg2l43TJsZ","78hhjSZcxOyblJC8KPScP2@9694c","7aPhmEUjNGxptl/AdTuwxa","60hmY/MbVKNr8oqqgQaXMq","78hhjSZcxOyblJC8KPScP2@bdf20","08KEk5BSFBW4NDeMKybgYg","8am/wTFxhFzqqQaN5/z4+L","78hhjSZcxOyblJC8KPScP2@f8ebf","970jCLq4NDXb4giJdk9yoa","12Y9dMgWdJKJGmTiZyQR9H@fc873","e0qx+gOfFMA6xmQ2wx8733","39cWwI4xdFupH3FIi5OfrE@9a84c","234Sip+TxA/7DJ2oLmkatb@1cc12","234Sip+TxA/7DJ2oLmkatb@7a002","224vgUzjFGxoflLzd7sXUR","b2O0yuKHVJHbkfyTBKgAnJ@f9941","e8N8g23gtOopDPzhI8KrDo@6c48a","a75A0r3GJGgZAs7seYmW54@6c48a","93Jlzz7UtGqYZbJjaKebZH"],["node","_mesh","_spriteFrame","_effectAsset","_parent","_font","mainTexture","_cameraComponent","loadingLayerCtrl","cashWidgetCtrl","scene","cashNodePrefab","_defaultClip","resultLayerPrefab","tryoutPagePrefab","_clip","_envmapHDR","_envmapLDR","secondTexture"],[["cc.Node",["_name","_layer","_id","_components","_parent","_lpos","_children","_lrot","_euler","_lscale"],0,9,1,5,2,5,5,5],["cc.Node",["_name","_layer","_active","_id","_children","_components","_parent","_lpos"],-1,2,12,1,5],["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Sprite",["_type","_sizeMode","node","_spriteFrame","__prefab"],1,1,6,4],["cc.MeshRenderer",["_name","_shadowReceivingMode","node","_materials","bakeSettings","_mesh","__prefab"],1,1,3,4,6,4],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","_fontSize","_overflow","_enableWrapText","_lineHeight","node","_font","__prefab"],-4,1,6,4],["cc.Widget",["_alignFlags","_alignMode","_originalWidth","_originalHeight","_left","_bottom","node","__prefab"],-3,1,4],["cc.Material",["_name","_states","_defines","_techIdx","_props"],-1,12],["cc.Animation",["playOnLoad","node","_clips","_defaultClip","__prefab"],2,1,3,6,4],["cc.Camera",["_clearFlags","_visibility","_fov","_fovAxis","_near","_projection","_priority","_orthoHeight","_far","node","_color"],-6,1,5],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_layer","_parent","_components","_lpos"],1,1,2,5],["cc.BlockInputEvents",["node"],3,1],["cc.CompPrefabInfo",["fileId"],2],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["a7c7cC6bS1C6anE7AEJMPwY",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["root","asset","instance","nestedPrefabInstanceRoots","targetOverrides"],-2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.ModelBakeSettings",[],3],["cc.RigidBody",["_group","_type","node"],1,1],["cc.BoxCollider",["node","_center","_size"],3,1,5,5],["cc.ParticleSystem2D",["_name","_dstBlendFactor","emissionRate","life","lifeVar","angle","angleVar","startSize","startSizeVar","endSize","endSizeVar","startSpin","startSpinVar","endSpin","endSpinVar","speed","speedVar","tangentialAccel","radialAccel","startRadius","playOnLoad","_custom","_totalParticles","node","__prefab","posVar","gravity","_endColor","_spriteFrame"],-20,1,4,5,5,5,6],["57f6eD6F0pPK5tQdVpIgy7A",["node"],3,1],["cc.DirectionalLight",["_colorTemperature","_shadowBias","_shadowDistance","_csmLevel","_shadowNear","_shadowFar","node","_staticSettings"],-3,1,4],["cc.StaticLightSettings",[],3],["eecc4fckbJFSpIIHHa2NKj8",["node","loadingLayer","cashWidgetCtrl","loadingLayerCtrl","cameraNode","touchNode","cashNodePrefab","resultLayerPrefab","tryoutPagePrefab"],3,1,1,1,1,1,1,6,6,6],["edafcvfa0xMpJSm5mai9wUN",["withAction","node","label"],2,1,1],["d4e76xI9Z9OGKtvaGU06RCH",["node","cashLabelTickCtrl"],3,1,1],["cc.ProgressBar",["_totalLength","_progress","node","__prefab","_barSprite"],1,1,4,1],["8fb609FjfdIrrU+g0Xj7S0Q",["autoProgress","node","label","airplane","bar"],2,1,1,1,1],["cc.AudioSource",["_loop","node","_clip"],2,1,6]],[[30,1],[16,0,2],[4,2,3,4,5,1],[0,0,1,4,3,5,3],[0,0,4,3,5,7,8,2],[31,0,1,2,3],[32,0,1,2,1],[0,0,4,3,5,2],[4,2,6,3,4,5,1],[2,0,2,1,1],[10,0,1,2,3],[2,0,1,1],[4,0,2,6,3,4,5,2],[7,0,1,2,4,4],[0,0,4,3,5,7,9,8,2],[0,0,4,3,5,9,2],[1,0,1,6,5,7,3],[3,2,4,3,1],[0,0,2,4,3,5,7,8,3],[0,0,4,6,3,5,7,9,8,2],[0,0,2,4,3,3],[2,0,2,1,3,1],[6,0,2,3,1,6,5],[3,0,2,4,3,2],[3,2,3,1],[7,0,3,1,2,4,5],[11,0,1,2,3,5],[12,0,1,2,4],[13,0,2],[1,0,4,7,2],[1,0,2,1,4,5,4],[1,0,1,4,3],[1,0,4,2],[1,0,1,6,4,5,7,3],[1,0,1,3,6,4,4],[1,0,1,6,4,5,3],[0,0,1,2,6,3,5,4],[0,0,1,6,3,5,3],[0,0,1,4,6,3,3],[0,0,4,3,2],[0,0,4,6,3,5,9,2],[0,0,4,3,7,9,8,2],[14,0,1,2,3,4,3],[2,0,2,1],[2,0,1],[6,0,6,7,2],[6,0,4,5,1,6,5],[3,0,1,2,3,3],[3,0,1,2,4,3],[15,0,1],[17,0,1,2,1],[18,0,1],[19,0,1,2,3,2],[20,0,1,2,3,4,6],[21,0,1,2,3,4,5,6,7,1],[22,0,1,2,2],[23,0,1,1],[24,0,1,2,2],[25,0,1],[26,1],[27,1],[28,1],[29,1],[8,0,1,2,3,2],[8,1,4,1],[4,0,1,2,6,3,4,5,3],[33,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,24],[5,0,1,4,5,2,7,8,6],[5,0,1,3,6,2,7,9,8,6],[5,0,1,3,4,5,2,7,7],[5,0,1,3,6,2,7,9,6],[34,0,1],[9,2,3,4,0,1,9,6],[9,5,6,7,8,0,1,9,10,7],[35,0,1,2,3,4,5,6,7,7],[36,1],[37,0,1,2,3,4,5,6,7,8,1],[38,0,1,2,2],[39,0,1,1],[40,0,1,2,3,4,3],[41,0,1,2,3,4,2],[42,0,1,2,2]],[[[[10,".bin",2352379011,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3888,"length":768,"count":384,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":3888,"count":81,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3,0,-3.6579601764678955],"maxPosition",8,[1,3,1.3603475093841553,3.6579601764678955]]],-1],0,0,[],[],[]],[[[10,".bin",4155882528,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5808,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5808,"count":121,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3,0,-4.937318325042725],"maxPosition",8,[1,3,1.5975303649902344,4.937318325042725]]],-1],0,0,[],[],[]],[[[10,".bin",901993004,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14496,"length":1248,"count":624,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":21888,"length":384,"count":192,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":23808,"length":96,"count":48,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14496,"count":302,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":15744,"length":6144,"count":128,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":22272,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.683357834815979,0,-0.683357834815979],"maxPosition",8,[1,0.683357834815979,3.1861519813537598,0.683357834815979]]],-1],0,0,[],[],[]],[[[10,".bin",3398491083,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5808,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5808,"count":121,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.482436180114746,0,-4.138901710510254],"maxPosition",8,[1,4.482436656951904,1,4.138901710510254]]],-1],0,0,[],[],[]],[[[10,".bin",3915098301,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":300,"count":150,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3,0,-3],"maxPosition",8,[1,3,1,3]]],-1],0,0,[],[],[]],[[[13,"mountain",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_FOG_WHITE":true,"USE_TEXTURE":true}],[[[{"selfBrightness":0.5},"tilingOffset",8,[2,3,3,0,0],"mainColor",8,[4,4280189201],"fogColor",8,[4,4289578613],"mainTexture",6,0]],11]]],0,0,[0,0],[6,3],[24,2]],[[[10,".bin",1613989289,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-50,0,-49.999996185302734],"maxPosition",8,[1,50,0,50]]],-1],0,0,[],[],[]],[[[13,"lighthouse_2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{"selfBrightness":0.5},"mainColor",8,[4,4278245344]]],11]]],0,0,[0],[3],[2]],[[[26,"lighthouse_0",[{"selfBrightness":0.3}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[3],[2]],[[[27,"../effect/sea",[{"hash":4053692915,"name":"../effect/sea|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"heroOffsetVec4","type":16,"count":1}],"defines":[]},{"name":"TexCoords","stageFlags":1,"binding":1,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]},{"name":"secondTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"heroOffsetVec4","type":16,"count":1}],"defines":[]},{"name":"TexCoords","stageFlags":1,"binding":1,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]},{"name":"secondTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n#endif\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nlayout(std140) uniform Constants {\n  vec4 heroOffsetVec4;\n};\nout vec4 v_position;\nout vec4 v_worldPos;\nout vec2 v_uv;\nlayout(std140) uniform TexCoords {\n  vec4 tilingOffset;\n};\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  float angle = position.z /2.0 +  cc_time.x / 2.0;\n  position.y = (sin(angle) - 1.0) * 0.2 ;\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_position = position;\n  v_worldPos =  matWorld * position;\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if CC_USE_FOG != 4\n#endif\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nlayout(std140) uniform Constants {\n  vec4 heroOffsetVec4;\n};\nuniform sampler2D mainTexture;\nuniform sampler2D secondTexture;\nin vec2 v_uv;\nin vec4 v_position;\nin vec4 v_worldPos;\nvec4 frag () {\n  vec4 f0 = texture(mainTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  vec4 f1 = texture(secondTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  float dis = distance(cc_cameraPos.xyz, v_worldPos.xyz);\n  float fe = smoothstep(20.0,250.0,dis);\n vec4 f = f0 * fe + f1 * (1.0 - fe);\n  return f;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n#endif\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvarying vec4 v_position;\nvarying vec4 v_worldPos;\nvarying vec2 v_uv;\n  uniform vec4 tilingOffset;\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  float angle = position.z /2.0 +  cc_time.x / 2.0;\n  position.y = (sin(angle) - 1.0) * 0.2 ;\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_position = position;\n  v_worldPos =  matWorld * position;\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp vec4 cc_cameraPos;\n#if CC_USE_FOG != 4\n#endif\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\n        uniform vec4 heroOffsetVec4;\nuniform sampler2D mainTexture;\nuniform sampler2D secondTexture;\nvarying vec2 v_uv;\nvarying vec4 v_position;\nvarying vec4 v_worldPos;\nvec4 frag () {\n  vec4 f0 = texture2D(mainTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  vec4 f1 = texture2D(secondTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  float dis = distance(cc_cameraPos.xyz, v_worldPos.xyz);\n  float fe = smoothstep(20.0,250.0,dis);\n vec4 f = f0 * fe + f1 * (1.0 - fe);\n  return f;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":76,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../effect/sea|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"secondTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"offset":{"vaule":0,"type":13,"handleInfo":["heroOffsetVec4",0,13]},"heroOffsetVec4":{"type":16,"value":[0,0,0,0]}}}]}]]],0,0,[],[],[]],[[[25,"finish","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,1660812797],"mainTexture",6,0]],11]]],0,0,[0,0],[6,3],[25,26]],[[[13,"lighthouse_1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{"selfBrightness":0.3},"mainColor",8,[4,4278190306]]],11]]],0,0,[0],[3],[2]],[[[28,"FlyScene"],[29,"build",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23],[1,0,0,-79.735]],[30,"loadingLayer",false,33554432,[-29,-30,-31,-32],[[[11,-24,[5,640,1136]],[22,45,100,100,0,-25],[47,1,0,-26,13],[49,-27],-28],4,4,4,4,1]],[36,"Canvas",33554432,"3cPTAxLalIzIhWdPueU9Ko",[-38,-39,-40,-41,2,-42],[[9,-33,[1,"0dngp/9gNO34wUQjZfN/CX"],[5,640,1136]],[50,-35,[1,"3f2oTdCepERZdpmIfLsrhd"],-34],[45,45,-36,[1,"e8a+bU/8dPDbbJguUzLdoF"]],[51,-37]],[1,320,568,0]],[52,"FlyScene",[-43,-44,-45,-46,-47,3],[53,null,null,null,null,[]],[54,[55,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[56,[4,4283190348],[0,512,512]],[57,true,105,106],[58,[4,4292993505]],[59],[60],[61],[62]]],[37,"tip",33554432,[-51,-52,-53],[[9,-48,[1,"f7NISe7HdAD68SLfhnddy8"],[5,545,111]],[23,1,-49,[1,"e71ctEmpxFC4KlSYRZNz/a"],7],[63,true,-50,[8],9]],[1,0,-276.392,0]],[31,"footwall",1,[-54,-55,-56,-57,-58,-59]],[32,"mountain",[-60,-61,-62,-63,-64,-65]],[33,"cashWidget",33554432,3,[-69,-70],[[[11,-66,[5,170,47]],[24,-67,3],-68],4,4,1],[1,440.11799999999994,461.414,0]],[34,"map0",1,"2829pyAwxAbahb+G/5aNaY",4,[6,1,-71,-72,7]],[38,"touchNode",33554432,3,[5],[[11,-73,[5,640,1136]],[22,45,100,100,0,-74]]],[35,"ProgressBar",33554432,2,[-78],[[[9,-75,[1,"0a4TUb2bBHBa3wO6MCw2d2"],[5,447,55]],[23,1,-76,[1,"e3LBidlN9MdpNxB8lzYZv7"],11],-77],4,4,1]],[16,"numLabel",33554432,8,[[[11,-79,[5,101.01499999999997,40]],-80,-81],4,1,1],[1,-25.9185,0,0]],[16,"version",33554432,2,[[[21,-82,[1,"c68UOAlNhN171Umca6yVvF"],[5,212.92,50],[0,0,0.5]],-83,[46,12,10,10,0,-84]],4,1,4],[1,-310,-533,0]],[3,"airplane",33554432,2,[[9,-85,[1,"f7NISe7HdAD68SLfhnddy8"],[5,229,84]],[17,-86,[1,"e71ctEmpxFC4KlSYRZNz/a"],12]],[1,-215,77,0]],[7,"b0",1,[[2,-87,[28],[0],29],[5,16,2,-88],[6,-89,[1,0,3,0],[1,7.975,6,18.747]]],[1,190.937,0,241.55]],[4,"b1",1,[[2,-90,[30],[0],31],[5,16,2,-91],[6,-92,[1,-1.6,3,-0.7],[1,26.324,6,6.252]]],[1,12.617,-0.025,96.546],[3,6.123234262925839e-17,1,-6.123234262925839e-17,6.123234262925839e-17],[1,7.0167096047110005e-15,180,7.0167096047110005e-15]],[4,"b2",1,[[2,-93,[32],[0],33],[5,16,2,-94],[6,-95,[1,0,5,0.6],[1,18.669,10,33.784]]],[1,-3.448,-0.025,113.171],[3,6.123234262925839e-17,1,-6.123234262925839e-17,6.123233995736766e-17],[1,7.0167096047110005e-15,180,7.0167096047110005e-15]],[4,"b7",1,[[2,-96,[34],[0],35],[5,16,2,-97],[6,-98,[1,0,4,0],[1,21.598,8,10.359]]],[1,22.875,0.034,252.676],[3,0,-0.7071067811865477,0,0.7071067811865474],[1,0,-90.00000000000003,0]],[7,"b11",1,[[2,-99,[40],[0],41],[5,16,2,-100],[6,-101,[1,0,4.5,-0.1],[1,17.89,8,9.536]]],[1,33.065,-0.378,177.989]],[4,"b13",1,[[2,-102,[44],[0],45],[5,16,2,-103],[6,-104,[1,0,2,0],[1,8.342,4,16.689]]],[1,30.95,0.034,273.553],[3,0,0.7071067811865476,0,0.7071067811865476],[1,0,90.00000000000003,0]],[4,"b17",1,[[2,-105,[46],[0],47],[5,16,2,-106],[6,-107,[1,0,5,0.6],[1,18.669,10,33.784]]],[1,-3.448,-0.025,147.103],[3,6.123234262925839e-17,1,-6.123234262925839e-17,6.123234262925839e-17],[1,7.0167096047110005e-15,180,7.0167096047110005e-15]],[4,"b18",1,[[2,-108,[48],[0],49],[5,16,2,-109],[6,-110,[1,0,5,0.6],[1,18.669,10,33.784]]],[1,-3.448,-0.025,181.332],[3,6.123234262925839e-17,1,-6.123234262925839e-17,6.123234262925839e-17],[1,7.0167096047110005e-15,180,7.0167096047110005e-15]],[4,"b19",1,[[2,-111,[50],[0],51],[5,16,2,-112],[6,-113,[1,0,5,0.6],[1,18.669,10,33.784]]],[1,-3.448,-0.025,215.656],[3,6.123234262925839e-17,1,-6.123234262925839e-17,6.123234262925839e-17],[1,7.0167096047110005e-15,180,7.0167096047110005e-15]],[4,"b20",1,[[2,-114,[52],[0],53],[5,16,2,-115],[6,-116,[1,0,2,0],[1,8.342,4,16.689]]],[1,30.95,0.034,286.351],[3,0,0.7071067811865476,0,0.7071067811865475],[1,0,90.00000000000003,0]],[4,"b21",1,[[2,-117,[54],[0],55],[5,16,2,-118],[6,-119,[1,-1.6,3,-0.7],[1,26.324,6,6.252]]],[1,12.54,-0.025,177.319],[3,6.123234262925839e-17,1,-6.123234262925839e-17,6.123234262925839e-17],[1,7.0167096047110005e-15,180,7.0167096047110005e-15]],[7,"b22",1,[[2,-120,[56],[0],57],[5,16,2,-121],[6,-122,[1,0,4.5,-0.1],[1,17.89,8,9.536]]],[1,31.941,-0.378,96.28]],[7,"b29",1,[[2,-123,[70,71],[0],72],[5,16,2,-124],[6,-125,[1,0,3,0],[1,1.101,6,1]]],[1,135.436,0,86.03]],[3,"rain",33554432,3,[[43,-126,[1,"52j42auLRKAqKHqVwKrYR+"]],[66,"Node<ParticleSystem2D>",1,50,2,0.5,-90,0,80,40,120,40,5,5,10,10,500,100,-100,100,100,false,true,200,-127,[1,"7aW/vBOFFJYZIJQ4frUfp7"],[0,400,0],[0,0,-300],[4,771751935],1]],[1,0,568,-1]],[3,"result_cash",33554432,8,[[11,-128,[5,77,71]],[24,-129,2]],[1,68.473,0,0]],[3,"tipLabel",33554432,5,[[11,-130,[5,338.80699999999996,40]],[67,"滑动屏幕控制飞机",40,2,false,false,-131,4]],[1,69.866,0,0]],[3,"touch_path",33554432,5,[[9,-132,[1,"f7NISe7HdAD68SLfhnddy8"],[5,85,45]],[17,-133,[1,"e71ctEmpxFC4KlSYRZNz/a"],5]],[1,-164.249,1.846,0]],[3,"touch_finger",33554432,5,[[9,-134,[1,"f7NISe7HdAD68SLfhnddy8"],[5,76,90]],[17,-135,[1,"e71ctEmpxFC4KlSYRZNz/a"],6]],[1,8.051,-82.621,0]],[39,"bottomBanner",3,[[44,-136],[71,-137]]],[3,"Label-001",33554432,2,[[9,-138,[1,"c68UOAlNhN171Umca6yVvF"],[5,207.29,50]],[68,"加载中...",50,50,50,false,-139,[1,"2frm37uaJHQr0AEEaYyM82"],10]],[1,0,-64.262,0]],[16,"Bar",33554432,11,[[[21,-140,[1,"80SdIywIVFupwJOwCni0ux"],[5,435,40],[0,0,0.5]],-141],4,1],[1,-217.897,0.789,0]],[18,"Camera","94LQUOSCJPCKUkMNasyRv3",4,[[72,40.611,1,0.1,14,1074790401,-142]],[1,55,30,161],[3,-0.17072543417961816,0,0,0.9853186419246217],[1,-19.66,0,0]],[3,"footwall0",1,6,[[12,"Plane<ModelComponent>",-143,[1,"e0uHCYkZ1D1I9glcT6oLf2"],[16],[0],17],[64,-144,[1,"98qoIpPQhPVp55exIJg+pp"]]],[1,50,0,50]],[19,"_山2",7,[-146],[[8,-145,[1,"b77Y3g2OdWnJcQruDFx/hA"],[88],[0],89]],[1,8.946,-0.992,-82.964],[3,0,-0.7786868349939107,0,0.6274127931491086],[1,4.025,4.025,4.025],[1,0,-102.281,0]],[40,"_山1",7,[-148],[[8,-147,[1,"2bZydwKFxSPJHJ/aAfZVaM"],[94],[0],95]],[1,98.168,-1.031,-132.961],[1,6.214,6.214,6.214]],[19,"_山6",7,[-150],[[8,-149,[1,"2bZydwKFxSPJHJ/aAfZVaM"],[102],[0],103]],[1,98.168,-1.031,-31.934],[3,0,-0.5247141207903174,0,0.8512785040415647],[1,6.214,6.214,6.214],[1,0,-63.298,0]],[18,"Main Light","63uuMBTa1Lu5/hfg1/Dm1R",4,[[74,5221,0.1,100,1,1,30,-151,[75]]],[1,-3.497,6.122,6.054],[3,-0.45331366262838135,-0.33382305316682315,-0.10454309618816536,0.8198412245601062],[1,-55.103,-40.372,7.541]],[20,"flyScene","1cD5itq8tOHaFSbWwiePgK",4,[[76,-154,2,-153,-152,36,10,0,14,15]]],[42,"Camera",33554432,3,[-155],[1,0,0,1000]],[73,0,1073741824,568,2000,6,41943040,43,[4,4278190080]],[69,"99999",35,35,2,false,false,12],[77,true,12,45],[78,8,46],[70,"version:100",35,35,50,false,13,[1,"2frm37uaJHQr0AEEaYyM82"]],[48,2,0,35,[1,"e00niSjJdHzqQfr6Uq+1as"]],[79,435,1,11,[1,"3f/uAXDzRCkYMASuN3GC61"],49],[80,false,2,48,14,50],[3,"footwall1",1,6,[[12,"Plane<ModelComponent>",-156,[1,"e0uHCYkZ1D1I9glcT6oLf2"],[18],[0],19]],[1,150,0,50]],[3,"footwall2",1,6,[[12,"Plane<ModelComponent>",-157,[1,"e0uHCYkZ1D1I9glcT6oLf2"],[20],[0],21]],[1,50,0,150]],[3,"footwall3",1,6,[[12,"Plane<ModelComponent>",-158,[1,"e0uHCYkZ1D1I9glcT6oLf2"],[22],[0],23]],[1,150,0,150]],[3,"footwall4",1,6,[[12,"Plane<ModelComponent>",-159,[1,"e0uHCYkZ1D1I9glcT6oLf2"],[24],[0],25]],[1,50,0,250]],[3,"footwall5",1,6,[[65,"Plane<ModelComponent>",0,-160,[1,"e0uHCYkZ1D1I9glcT6oLf2"],[26],[0],27]],[1,150,0,250]],[7,"b8",1,[[2,-161,[36],[0],37]],[1,-4.798,0,196.079]],[7,"b10",1,[[2,-162,[38],[0],39]],[1,-5.31,5.607,103.258]],[4,"b12",1,[[2,-163,[42],[0],43]],[1,37.841,8.304,175.787],[3,6.609662224247856e-17,-0.9965595158878384,6.609662224247858e-17,0.08288022257087077],[1,8.175800702921696e-15,-170.49171921704234,-6.920312030768919e-15]],[4,"b23",1,[[2,-164,[58],[0],59]],[1,-5.31,5.607,169.44],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[14,"b24",1,[[2,-165,[60],[0],61]],[1,-1.473,1.401,136.632],[3,8.659560940217344e-17,0.7071067811865475,6.162975822039155e-33,0.7071067811865476],[1,1,1,2.774],[1,7.0167096047110005e-15,90,7.0167096047110005e-15]],[14,"b25",1,[[2,-166,[62],[0],63]],[1,-3.919,7.728,139.456],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.192,1.192,1.192],[1,0,90,0]],[4,"b26",1,[[2,-167,[64],[0],65]],[1,34.007,8.05,94.017],[3,-6.609662224247856e-17,0.9965595158878384,-6.609662224247858e-17,-0.08288022257087078],[1,8.175800702921696e-15,-170.49171921704234,-6.920312030768917e-15]],[7,"b27",1,[[2,-168,[66],[0],67]],[1,-6.111,18.131,138.932]],[4,"b28",1,[[2,-169,[68],[0],69]],[1,-1.479,18.131,145.985],[3,0,0.5577306224475345,0,0.8300220194574874],[1,0,67.798,0]],[14,"b35",1,[[2,-170,[73,74],[0],75]],[1,-1.928,19.322,131.648],[3,0,-0.7071067811865476,0,0.7071067811865475],[1,0.54,0.54,0.54],[1,0,-90.00000000000003,0]],[15,"finish",9,[[12,"Quad<ModelComponent>",-171,[1,"cf0e2Ddb1LaZRmljaFideC"],[76],[0],77]],[1,47.344,44.484,-200],[1,200,200,200]],[15,"sea",9,[[2,-172,[78],[0],79]],[1,48.441,0,-100],[1,2,2,2]],[14,"_山4",7,[[8,-173,[1,"f9JL6oF0pcyqfLwq+93Cau"],[80],[0],81]],[1,33.969,-0.008,-196.372],[3,0,0.7106644186856906,0,0.7035311535491015],[1,5.802,5.802,31.658],[1,0,90.578,0]],[15,"_山3",7,[[8,-174,[1,"eb5ISgPXxWXpew/sIrM+C8"],[82],[0],83]],[1,-65.79,-0.442,-97],[1,11.492,11.492,20.838]],[41,"灯塔-001",38,[[8,-175,[1,"5aiFQrMJRSj6TkSxl83Mj4"],[84,85,86],[0],87]],[3,0,0.7786868349939106,0,0.6274127931491086],[1,1.5438509316770186,1.5438509316770181,1.5438509316770186],[1,0,102.28099999999999,0]],[7,"灯塔",39,[[8,-176,[1,"5aiFQrMJRSj6TkSxl83Mj4"],[90,91,92],[0],93]],[1,0,0.7699704170227051,0]],[15,"_山5",7,[[8,-177,[1,"f9JL6oF0pcyqfLwq+93Cau"],[96],[0],97]],[1,158.976,-0.849,-105.706],[1,5.802,5.802,29.344]],[7,"灯塔",40,[[8,-178,[1,"5aiFQrMJRSj6TkSxl83Mj4"],[98,99,100],[0],101]],[1,0,0.7699704170227051,0]],[20,"fly_effect","9f9LNkTixK162EUCYpVcyM",4,[[81,true,-179,104]]]],0,[0,-1,15,0,-2,16,0,-3,17,0,-4,18,0,-5,57,0,-6,58,0,-7,19,0,-8,59,0,-9,20,0,-10,21,0,-11,22,0,-12,23,0,-13,24,0,-14,25,0,-15,26,0,-16,60,0,-17,61,0,-18,62,0,-19,63,0,-20,64,0,-21,65,0,-22,27,0,-23,66,0,0,2,0,0,2,0,0,2,0,0,2,0,-5,51,0,-1,13,0,-2,34,0,-3,11,0,-4,14,0,0,3,0,7,44,0,0,3,0,0,3,0,0,3,0,-1,43,0,-2,28,0,-3,8,0,-4,10,0,-6,33,0,-1,41,0,-2,42,0,-3,36,0,-4,9,0,-5,75,0,0,5,0,0,5,0,0,5,0,-1,30,0,-2,31,0,-3,32,0,-1,37,0,-2,52,0,-3,53,0,-4,54,0,-5,55,0,-6,56,0,-1,69,0,-2,70,0,-3,38,0,-4,39,0,-5,73,0,-6,40,0,0,8,0,0,8,0,-3,47,0,-1,29,0,-2,12,0,-3,67,0,-4,68,0,0,10,0,0,10,0,0,11,0,0,11,0,-3,50,0,-1,35,0,0,12,0,-2,45,0,-3,46,0,0,13,0,-2,48,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,-2,49,0,0,36,0,0,37,0,0,37,0,0,38,0,-1,71,0,0,39,0,-1,72,0,0,40,0,-1,74,0,0,41,0,8,51,0,9,47,0,0,42,0,-1,44,0,0,52,0,0,53,0,0,54,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,0,72,0,0,73,0,0,74,0,0,75,0,10,4,1,4,9,2,4,3,3,4,4,5,4,10,6,4,9,7,4,9,179],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,48,49],[11,2,2,2,5,2,2,2,-1,12,5,2,2,2,13,14,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,-2,-3,1,-1,1,15,16,17,5,5,2],[27,28,29,30,3,31,32,33,16,16,3,34,35,36,37,38,0,39,0,40,0,41,0,42,0,43,0,44,45,46,8,9,4,5,47,48,49,50,17,18,10,11,6,7,19,20,4,5,4,5,4,5,19,20,8,9,10,11,17,18,8,9,10,11,6,7,6,7,6,7,51,52,53,54,55,56,57,58,59,60,1,21,1,61,12,13,14,15,1,62,12,13,14,15,1,22,1,21,12,13,14,15,1,22,63,23,23,3,3,64]],[[[13,"sea",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tilingOffset",8,[2,4,4,0,0],"mainTexture",6,0,"secondTexture",6,1]],11]]],0,0,[0,0,0],[6,18,3],[65,66,67]]]]
